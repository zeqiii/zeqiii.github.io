<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编译 on 泽棋的博客</title>
    <link>https://zeqiii.github.io/tags/%E7%BC%96%E8%AF%91/</link>
    <description>Recent content in 编译 on 泽棋的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2021. All rights reserved.</copyright>
    <lastBuildDate>Fri, 27 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zeqiii.github.io/tags/%E7%BC%96%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解决&#39;PHDR segment not covered by LOAD segment&#39;的编译错误</title>
      <link>https://zeqiii.github.io/post/%E8%A7%A3%E5%86%B3phdr-segment-not-covered-by-load-segment%E7%9A%84%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zeqiii.github.io/post/%E8%A7%A3%E5%86%B3phdr-segment-not-covered-by-load-segment%E7%9A%84%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/</guid>
      <description>出错的Linux环境中，编译用的是xPacks的嵌入式程序开发工具链，编译调用的是arm-none-eabi-gcc，通过 --version 命令发现其版本为2020年的新版本。
相反，在windows环境下，编译不会出错。编译调用的是2018年的版本，是7.x的老版本。
因此，将Linux环境下的工具链替换为与windows环境相同的老版本即可。
具体PHDR segment相关的知识尚未理解。</description>
    </item>
    
    <item>
      <title>使用DataflowSanitizr实现污点追踪</title>
      <link>https://zeqiii.github.io/post/%E4%BD%BF%E7%94%A8dataflowsanitizer%E5%AE%9E%E7%8E%B0%E6%B1%A1%E7%82%B9%E8%BF%BD%E8%B8%AA/</link>
      <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zeqiii.github.io/post/%E4%BD%BF%E7%94%A8dataflowsanitizer%E5%AE%9E%E7%8E%B0%E6%B1%A1%E7%82%B9%E8%BF%BD%E8%B8%AA/</guid>
      <description>示例程序 test.c
#include &amp;lt;sanitizer/dfsan_interface.h&amp;gt; #include &amp;lt;assert.h&amp;gt; int main(void) { int i = 1; dfsan_label i_label = dfsan_create_label(&amp;quot;i&amp;quot;, 0); dfsan_set_label(i_label, &amp;amp;i, sizeof(i)); int j = 2; dfsan_label j_label = dfsan_create_label(&amp;quot;j&amp;quot;, 0); dfsan_set_label(j_label, &amp;amp;j, sizeof(j)); int k = 3; dfsan_label k_label = dfsan_create_label(&amp;quot;k&amp;quot;, 0); dfsan_set_label(k_label, &amp;amp;k, sizeof(k)); dfsan_label ij_label = dfsan_get_label(i + j); assert(dfsan_has_label(ij_label, i_label)); assert(dfsan_has_label(ij_label, j_label)); assert(!dfsan_has_label(ij_label, k_label)); dfsan_label ijk_label = dfsan_get_label(i + j + k); assert(dfsan_has_label(ijk_label, i_label)); assert(dfsan_has_label(ijk_label, j_label)); assert(dfsan_has_label(ijk_label, k_label)); return 0; } sanitizer/dfsan_interface.</description>
    </item>
    
    <item>
      <title>解决&#39;undefined reference to xxx&#39;的编译错误的一个思路</title>
      <link>https://zeqiii.github.io/post/%E8%A7%A3%E5%86%B3undefined-reference-to-xxx%E7%9A%84%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zeqiii.github.io/post/%E8%A7%A3%E5%86%B3undefined-reference-to-xxx%E7%9A%84%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/</guid>
      <description>一个小实验 编辑hello.h如下：
#ifndef HELLO_H #define HELLO_H void myprint(const char* name); #endif 编辑hello.c如下：
#include &amp;lt;stdio.h&amp;gt; void myprint(const char* name) { printf(name); printf(&amp;quot;\n&amp;quot;); _zeqi_printf(&amp;quot;end\n&amp;quot;); } 编辑main.c如下：
#include &amp;quot;hello.h&amp;quot; int main() { myprint(&amp;quot;test&amp;quot;); return 0; } 执行如下命令进行编译，生成hello.o和main.o。：
gcc -c hello.c gcc -c main.c 执行如下命令生成可执行文件：
gcc hello.o main.o -o hello 会出现以下错误：
/usr/bin/ld: hello.o: in function `myprint&#39;: hello.c:(.text+0x38): undefined reference to `_zeqi_printf&#39; collect2: error: ld returned 1 exit status 可知出现错误的原因是hello.c的myprint函数中调用的_zeqi_printf函数未定义。
解决问题的方法就是让编译器找到_zeqi_printf的定义。为此，编辑repair.c如下：
#include &amp;lt;stdio.h&amp;gt; void _zeqi_printf(const char* name) { printf(&amp;quot;zeqi_&amp;quot;); printf(name); printf(&amp;quot;\n&amp;quot;); } 执行如下命令编译repaire.</description>
    </item>
    
  </channel>
</rss>
