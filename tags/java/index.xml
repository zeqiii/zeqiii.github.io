<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Zeqi&#39;s Blog</title>
    <link>https://zeqiii.github.io/tags/java/</link>
    <description>Recent content in Java on Zeqi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>zeqiii@163.com (zeqi)</managingEditor>
    <webMaster>zeqiii@163.com (zeqi)</webMaster>
    <copyright>(c) 2016 zeqi</copyright>
    <lastBuildDate>Thu, 10 Mar 2016 17:20:53 +0800</lastBuildDate>
    <atom:link href="https://zeqiii.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Methods of Debugging Java Programs</title>
      <link>https://zeqiii.github.io/2016/03/10/methods-of-debugging-java-programs/</link>
      <pubDate>Thu, 10 Mar 2016 17:20:53 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/03/10/methods-of-debugging-java-programs/</guid>
      <description>

&lt;h2 id=&#34;debug-java-source-code-in-eclipse&#34;&gt;Debug Java Source Code In Eclipse&lt;/h2&gt;

&lt;p&gt;Sometimes we want to know how a Java API works. It is a good idea to write a testing program, debug it and step into the API function to see how it works.&lt;/p&gt;

&lt;p&gt;But when I first try this, I encounter a problem like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/source_not_found.png&#34; alt=&#34;source not found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To solve this problem.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;code&gt;Window&lt;/code&gt;-&amp;gt;&lt;code&gt;Preferences&lt;/code&gt;-&amp;gt;&lt;code&gt;Java&lt;/code&gt;-&amp;gt;&lt;code&gt;Installed JREs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/installed_jres.png&#34; alt=&#34;installed jres&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;code&gt;Add...&lt;/code&gt;, select &lt;code&gt;Standard VM&lt;/code&gt; and click &lt;code&gt;Next&amp;gt;&lt;/code&gt;, in the dialog, add your JDK_HOME to the &lt;code&gt;JRE home:&lt;/code&gt;, give a name for the new JRE definition, then click &lt;code&gt;Finish&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/jre_definition.png&#34; alt=&#34;jre definition&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Return to your project, right click on the project and select &lt;code&gt;Properties&lt;/code&gt;-&amp;gt;&lt;code&gt;Java Build Path&lt;/code&gt;-&amp;gt;&lt;code&gt;Libraries&lt;/code&gt;, select the &lt;code&gt;JRE System Library&lt;/code&gt; then click &lt;code&gt;Edit...&lt;/code&gt;. Replace the original JRE system library with your newly defined JRE library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/edit_library.png&#34; alt=&#34;jre definition&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;code&gt;Run&lt;/code&gt;-&amp;gt;&lt;code&gt;Debug Configurations...&lt;/code&gt;-&amp;gt;&lt;code&gt;Source&lt;/code&gt;, add your project folder to the &lt;code&gt;Source Lookup Path&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/add_project_source_folder.png&#34; alt=&#34;add project source folder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s debug!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/debug.png&#34; alt=&#34;debug&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;debug-with-jdi&#34;&gt;Debug with JDI&lt;/h2&gt;

&lt;p&gt;Referring to &lt;a href=&#34;http://illegalargumentexception.blogspot.com/2009/03/java-using-jpda-to-write-debugger.html&#34;&gt;llegalargumentexception.blogspot.com&lt;/a&gt;, using Java code to connect to the VM can help us debug a Java program.&lt;/p&gt;

&lt;p&gt;The routine to debug.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Test {

  int foo;

  public static void main(String[] args) {
    Random random = new Random();
    Test test = new Test();
    for (int i = 0; i &amp;lt; 10; i++) {
      test.foo = random.nextInt();
      System.out.println(test.foo);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, import &lt;code&gt;tools.jar&lt;/code&gt; to the classpath.&lt;/p&gt;

&lt;p&gt;Code connecting to the VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VMAcquirer {

  /**
   * Call this with the localhost port to connect to.
   */
  public VirtualMachine connect(int port)
      throws IOException {
    String strPort = Integer.toString(port);
    AttachingConnector connector = getConnector();
    try {
      VirtualMachine vm = connect(connector, strPort);
      return vm;
    } catch (IllegalConnectorArgumentsException e) {
      throw new IllegalStateException(e);
    }
  }

  private AttachingConnector getConnector() {
    VirtualMachineManager vmManager = Bootstrap
        .virtualMachineManager();
    for (Connector connector : vmManager
        .attachingConnectors()) {
      System.out.println(connector.name());
      if (&amp;quot;com.sun.jdi.SocketAttach&amp;quot;.equals(connector
          .name())) {
        return (AttachingConnector) connector;
      }
    }
    throw new IllegalStateException();
  }

  private VirtualMachine connect(
      AttachingConnector connector, String port)
      throws IllegalConnectorArgumentsException,
      IOException {
    Map&amp;lt;String, Connector.Argument&amp;gt; args = connector
        .defaultArguments();
    Connector.Argument pidArgument = args.get(&amp;quot;port&amp;quot;);
    if (pidArgument == null) {
      throw new IllegalStateException();
    }
    pidArgument.setValue(port);

    return connector.attach(args);
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, monitoring Test.foo with code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>