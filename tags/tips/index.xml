<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Zeqi&#39;s Blog</title>
    <link>https://zeqiii.github.io/tags/tips/</link>
    <description>Recent content in Tips on Zeqi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>zeqiii@163.com (zeqi)</managingEditor>
    <webMaster>zeqiii@163.com (zeqi)</webMaster>
    <copyright>(c) 2016 zeqi</copyright>
    <lastBuildDate>Tue, 12 Jul 2016 10:12:45 +0800</lastBuildDate>
    <atom:link href="https://zeqiii.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tips of using Linux</title>
      <link>https://zeqiii.github.io/2016/07/12/tips-of-using-linux/</link>
      <pubDate>Tue, 12 Jul 2016 10:12:45 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/07/12/tips-of-using-linux/</guid>
      <description>

&lt;h2 id=&#34;install-and-switch-between-multiple-java-environments&#34;&gt;Install and Switch Between Multiple Java Environments&lt;/h2&gt;

&lt;p&gt;Compiling android source code, install JBoss, and so on, all need different Java environments like jdk6, jdk7, openjdk&amp;hellip;&lt;/p&gt;

&lt;p&gt;Can we install all these environments and switch to one version on the need?&lt;/p&gt;

&lt;p&gt;Yes, by using command &lt;code&gt;sudo update-alternatives --install&lt;/code&gt;, we can achieve this goal.&lt;/p&gt;

&lt;p&gt;Here is the help info about &lt;code&gt;update-alternatives&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/tips_of_linux/update_alternative_help.jpg&#34; alt=&#34;update_alternative help&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Assume that we have installed openjdk by &lt;code&gt;apt-get install openjdk-7-jdk&lt;/code&gt;, so that we have executable files &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;javac&lt;/code&gt;, &lt;code&gt;javah&lt;/code&gt;, &lt;code&gt;jar&lt;/code&gt; in directory &lt;code&gt;/usr/bin&lt;/code&gt;. And we have an oracle jdk6 in &lt;code&gt;/opt/jdk6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Use the commands below to install alternatives for these executables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/tips_of_linux/update_alternative_commands.jpg&#34; alt=&#34;update_alternative commands&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To switch between the installed alternatives, do this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/tips_of_linux/update_alternatives_switch.jpg&#34; alt=&#34;updatae_alternatives switch&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips of Java Programming</title>
      <link>https://zeqiii.github.io/2016/07/11/tips-of-java-programming/</link>
      <pubDate>Mon, 11 Jul 2016 09:14:05 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/07/11/tips-of-java-programming/</guid>
      <description>

&lt;h2 id=&#34;compile-resource-data-files-into-jars:1c55a72c09b2059aac55de6ef1fb52ae&#34;&gt;Compile resource/data files into JARs&lt;/h2&gt;

&lt;p&gt;In some situations, the app needs to read some constant values from configuration files. We want these config or data files to be compiled along with the .class files, so that the app can read these files in anytime and anywhere.&lt;/p&gt;

&lt;p&gt;To do so, we can create a package for the data files in our project and place the files in these package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/tips_of_java_programming/data_file.jpg&#34; alt=&#34;data_file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/tips_of_java_programming/data_file2.jpg&#34; alt=&#34;data_file2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how to access these resources?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The answer is &lt;code&gt;Class.getResourceAsStream(String path)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Config {
	
	String config = &amp;quot;&amp;quot;;
	
	public Config() throws IOException {
		// Get InputStream of config.txt
		InputStream in = this.getClass().getResourceAsStream(&amp;quot;/data/config.txt&amp;quot;);
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		byte[] buffer = new byte[128];
		while (true) {
			int len = in.read(buffer);
			if (len == -1)
				break;
			bos.write(buffer);
		}
		config = new String(bos.toByteArray());
	}
	
	public String getConfig() {
		return config;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;main&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) throws Exception {
    Config config = new Config();		
	System.out.println(config.getConfig());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/tips_of_java_programming/running_results.jpg&#34; alt=&#34;running_results&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-wait-notify-and-synchronized-to-handle-asynchronized-events:1c55a72c09b2059aac55de6ef1fb52ae&#34;&gt;Using &amp;lsquo;wait()&amp;rsquo;, &amp;lsquo;notify()&amp;rsquo; and &amp;lsquo;synchronized&amp;rsquo; to handle asynchronized events&lt;/h2&gt;

&lt;p&gt;Image a certain situation like this, one thread is waiting for a event, data input for example. The thread should be suspended until this event happens.&lt;/p&gt;

&lt;p&gt;We may use &lt;code&gt;while&lt;/code&gt; to achieve this goal, but this is not the best way because of wasting computing resource in &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;... //start waiting for event

while (true) {
   if (isEventHappened())
        break;
   Thread.sleep(1000);
}
... // continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there is a more beatiful way to handle events.&lt;/p&gt;

&lt;p&gt;Firstly, about the knowledge of Java synchronization, the official site gives us a very detailed instruction, see &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html&#34;&gt;http://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I write a demo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class EventHandler extends Thread {
	// event queue
	ArrayList&amp;lt;String&amp;gt; queue = new ArrayList&amp;lt;String&amp;gt;();
	
	public EventHandler() {
		this.start();
	}
	
	@Override
	public void run() {
		// start processing input events
		while (true) {
			synchronized (this) { // request the intrinsic lock of this object
				try {
					if (queue.isEmpty()) {
						// wait, release the intrinsic lock
						this.wait();
					}
					// thread has been waked up by this.notify()
					// there must be a coming event 
					// continue to fetch and handle event
					String value = null;
					if (queue.size() &amp;gt; 0) {
						value = queue.remove(0);
					}
					// handle event
					handle(value);
				} catch (InterruptedException e) {
					break;
				}
			}
		}
	}
	
	// emulate keyboard pressing event
	public void keyPressed(String value) {
		synchronized(this) { // request the intrinsic lock of this object
			queue.add(value);
			this.notify(); // wake up a thread that is waiting for this object
		}
	}
	
	private void handle(String event) {
		System.out.println(event);
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) throws Exception {
	EventHandler handler = new EventHandler();
	handler.keyPressed(&amp;quot;hello&amp;quot;);
	Thread.sleep(1000);
	handler.keyPressed(&amp;quot;word!&amp;quot;);
	Thread.sleep(5000);
	handler.keyPressed(&amp;quot;Bye!&amp;quot;);
	handler.interrupt();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/tips_of_java_programming/running_results2.jpg&#34; alt=&#34;running_results2&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flash Nexus Device with Compiled AOSP</title>
      <link>https://zeqiii.github.io/2016/07/10/flash-nexus-device-with-compiled-aosp/</link>
      <pubDate>Sun, 10 Jul 2016 16:20:10 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/07/10/flash-nexus-device-with-compiled-aosp/</guid>
      <description>

&lt;h2 id=&#34;compiling-aosp:e09e5eea499d5726e62ce1da3fc5dac3&#34;&gt;Compiling AOSP&lt;/h2&gt;

&lt;p&gt;About how to download and build AOSP source code, the android official site has provided us a very detailed instruction, see &lt;a href=&#34;https://source.android.com/source/requirements.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;downloading-drivers:e09e5eea499d5726e62ce1da3fc5dac3&#34;&gt;Downloading drivers&lt;/h2&gt;

&lt;p&gt;What we want is to flash the builded AOSP to a real nexus device, not just test the image on an emulator, so we need to download the drivers for a nexus deivce. From &lt;a href=&#34;https://developers.google.com/android/nexus/drivers&#34;&gt;https://developers.google.com/android/nexus/drivers&lt;/a&gt; we download sh files to our android source directory.&lt;/p&gt;

&lt;p&gt;And here is my baidu cloud share link, driver for Nexus6-android6.0.1 can be downloaded from here too. &lt;a href=&#34;http://pan.baidu.com/s/1o7LuWvo&#34;&gt;http://pan.baidu.com/s/1o7LuWvo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/flash_nexus_device/driver_sh_files.jpg&#34; alt=&#34;drivers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/flash_nexus_device/driver_sh_files2.jpg&#34; alt=&#34;drivers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Run these sh files and type &amp;laquo;I ACCEPT&amp;raquo;, then a &amp;laquo;vender&amp;raquo; directory will be created in our android source directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/flash_nexus_device/vendor.jpg&#34; alt=&#34;vendor&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;flashing:e09e5eea499d5726e62ce1da3fc5dac3&#34;&gt;Flashing&lt;/h2&gt;

&lt;p&gt;After the building is completed, we copy these &amp;laquo;img&amp;raquo; file to some directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/flash_nexus_device/images.jpg&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SDK provide us platforms which contains &amp;laquo;fastboot&amp;raquo;. Connect your device and your PC using an USB cable,  shutdown the device then press power button and volume down button at the same time, holding them until the device enters fastboot mode. Then use &lt;code&gt;fastboot devices&lt;/code&gt; to see if the devices has connected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/flash_nexus_device/fastboot.jpg&#34; alt=&#34;fastboot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;fastboot flash&lt;/code&gt; command to flash the image into the device. For example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot flash system E:\system.img
fastboot flash userdata E:\userdata.img
fastboot flash boot E:\boot.img
fastboot flash recovery E:\recovery.img
fastboot flash cache E:\cache.img
fastboot flash XXX YOUR_IMG_FILE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot your device.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modifying-compiling-and-flashing-aosp:e09e5eea499d5726e62ce1da3fc5dac3&#34;&gt;Modifying, Compiling and flashing AOSP&lt;/h2&gt;

&lt;p&gt;In some case, we need to modify AOSP code. If we just run &lt;code&gt;make&lt;/code&gt; everytime we finished modifying, it&amp;rsquo;ll be too time comsuming.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s better for us to find the &lt;code&gt;Android.mk&lt;/code&gt; file the modified module contains, open it, find &lt;code&gt;LOCAL_MODULE := XXX&lt;/code&gt; or &lt;code&gt;LOCAL_PACKAGE_NAME := XXX&lt;/code&gt;. The &lt;code&gt;XXX&lt;/code&gt; is the module name. Back to the root dir of AOSP, run &lt;code&gt;make XXX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To re-generate system.img, we just run &lt;code&gt;make systemimage&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Methods of Debugging Java Programs</title>
      <link>https://zeqiii.github.io/2016/03/10/methods-of-debugging-java-programs/</link>
      <pubDate>Thu, 10 Mar 2016 17:20:53 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/03/10/methods-of-debugging-java-programs/</guid>
      <description>

&lt;h2 id=&#34;debug-java-source-code-in-eclipse:71104563d2f4707e3c3b17590a7ace2b&#34;&gt;Debug Java Source Code In Eclipse&lt;/h2&gt;

&lt;p&gt;Sometimes we want to know how a Java API works. It is a good idea to write a testing program, debug it and step into the API function to see how it works.&lt;/p&gt;

&lt;p&gt;But when I first try this, I encounter a problem like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/source_not_found.png&#34; alt=&#34;source not found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To solve this problem.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;code&gt;Window&lt;/code&gt;-&amp;gt;&lt;code&gt;Preferences&lt;/code&gt;-&amp;gt;&lt;code&gt;Java&lt;/code&gt;-&amp;gt;&lt;code&gt;Installed JREs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/installed_jres.png&#34; alt=&#34;installed jres&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;code&gt;Add...&lt;/code&gt;, select &lt;code&gt;Standard VM&lt;/code&gt; and click &lt;code&gt;Next&amp;gt;&lt;/code&gt;, in the dialog, add your JDK_HOME to the &lt;code&gt;JRE home:&lt;/code&gt;, give a name for the new JRE definition, then click &lt;code&gt;Finish&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/jre_definition.png&#34; alt=&#34;jre definition&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Return to your project, right click on the project and select &lt;code&gt;Properties&lt;/code&gt;-&amp;gt;&lt;code&gt;Java Build Path&lt;/code&gt;-&amp;gt;&lt;code&gt;Libraries&lt;/code&gt;, select the &lt;code&gt;JRE System Library&lt;/code&gt; then click &lt;code&gt;Edit...&lt;/code&gt;. Replace the original JRE system library with your newly defined JRE library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/edit_library.png&#34; alt=&#34;jre definition&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;code&gt;Run&lt;/code&gt;-&amp;gt;&lt;code&gt;Debug Configurations...&lt;/code&gt;-&amp;gt;&lt;code&gt;Source&lt;/code&gt;, add your project folder to the &lt;code&gt;Source Lookup Path&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/add_project_source_folder.png&#34; alt=&#34;add project source folder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s debug!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/debug.png&#34; alt=&#34;debug&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;debug-with-jdi:71104563d2f4707e3c3b17590a7ace2b&#34;&gt;Debug with JDI&lt;/h2&gt;

&lt;p&gt;Referring to &lt;a href=&#34;http://illegalargumentexception.blogspot.com/2009/03/java-using-jpda-to-write-debugger.html&#34;&gt;llegalargumentexception.blogspot.com&lt;/a&gt;, using Java code to connect to the VM can help us debug a Java program.&lt;/p&gt;

&lt;p&gt;The routine to debug.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Test {

  int foo;

  public static void main(String[] args) {
    Random random = new Random();
    Test test = new Test();
    for (int i = 0; i &amp;lt; 10; i++) {
      test.foo = random.nextInt();
      System.out.println(test.foo);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, import &lt;code&gt;tools.jar&lt;/code&gt; to the classpath.&lt;/p&gt;

&lt;p&gt;Code connecting to the VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VMAcquirer {

  /**
   * Call this with the localhost port to connect to.
   */
  public VirtualMachine connect(int port)
      throws IOException {
    String strPort = Integer.toString(port);
    AttachingConnector connector = getConnector();
    try {
      VirtualMachine vm = connect(connector, strPort);
      return vm;
    } catch (IllegalConnectorArgumentsException e) {
      throw new IllegalStateException(e);
    }
  }

  private AttachingConnector getConnector() {
    VirtualMachineManager vmManager = Bootstrap
        .virtualMachineManager();
    for (Connector connector : vmManager
        .attachingConnectors()) {
      System.out.println(connector.name());
      if (&amp;quot;com.sun.jdi.SocketAttach&amp;quot;.equals(connector
          .name())) {
        return (AttachingConnector) connector;
      }
    }
    throw new IllegalStateException();
  }

  private VirtualMachine connect(
      AttachingConnector connector, String port)
      throws IllegalConnectorArgumentsException,
      IOException {
    Map&amp;lt;String, Connector.Argument&amp;gt; args = connector
        .defaultArguments();
    Connector.Argument pidArgument = args.get(&amp;quot;port&amp;quot;);
    if (pidArgument == null) {
      throw new IllegalStateException();
    }
    pidArgument.setValue(port);

    return connector.attach(args);
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, monitoring Test.foo with code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tips of C/C&#43;&#43; Programming</title>
      <link>https://zeqiii.github.io/2016/03/08/tips-of-c/c-programming/</link>
      <pubDate>Tue, 08 Mar 2016 10:12:52 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/03/08/tips-of-c/c-programming/</guid>
      <description>

&lt;h2 id=&#34;functions-reserved-words-and-macros:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;Functions, Reserved Words and Macros&lt;/h2&gt;

&lt;h3 id=&#34;reinterpret-cast-new-type-expression:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;reinterpret_cast &lt;new_type&gt; (expression)&lt;/h3&gt;

&lt;p&gt;Cast the &lt;code&gt;expression&lt;/code&gt; to a &lt;code&gt;new_type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef int (*FunctionPointer)(int); 
int value = 21; 
FunctionPointer funcP; 
funcP = reinterpret_cast&amp;lt;FunctionPointer&amp;gt; (&amp;amp;value); 
funcP(value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this program will crash after being executed.&lt;/p&gt;

&lt;h3 id=&#34;macro-with-variable-argument-list:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;Macro with variable argument list&lt;/h3&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define LOG(format, ...) fprintf(stdout, format, __VA_ARGS__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;...&lt;/code&gt; means the arguments are variable, &lt;code&gt;__VA_ARGS__&lt;/code&gt; represents the variable arguments.&lt;/p&gt;

&lt;p&gt;In GCC, we can also:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define LOG(format, args...) fprintf(stdout, format, args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the macros defined above, we can:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LOG(&amp;quot;%d,%s&amp;quot;, 1, &amp;quot;hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;size-t:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;size_t&lt;/h3&gt;

&lt;p&gt;Alias of one of the fundamental unsigned integer types. &lt;code&gt;size_t&lt;/code&gt; is unsigned integer defined in standard C lib, in 64-bit OS, it is long unsigned integer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sizeof&lt;/code&gt; operation returns a size_t type value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; usually is used in array index, looping, pointer, memory location calculating.&lt;/p&gt;

&lt;p&gt;See more &lt;a href=&#34;http://www.cplusplus.com/reference/cstring/size_t/&#34;&gt;DETAILS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;mutable:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;mutable&lt;/h3&gt;

&lt;p&gt;mutable variables always can be changed even if it is in a const function.&lt;/p&gt;

&lt;p&gt;As we know, if a function doesn&amp;rsquo;t change any fields of a class, this function will be declared with &lt;code&gt;const&lt;/code&gt;. But sometimes this kind of functions need to modify some specific fields that have no business with the state of the class. In this condition, these specific fields should declared with the key word &lt;code&gt;mutable&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;volatile:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;volatile&lt;/h3&gt;

&lt;p&gt;To optimize a program, commonly, the compiler make the executables read/write a variable from registers. But sometimes a varible may be changed frequently.&lt;/p&gt;

&lt;p&gt;If a variable are declared with the key word &lt;code&gt;volatile&lt;/code&gt;, that means the variable can be changed at any moment,
the compiler will compile the program to make this variable be read/write directly from the memory, which helps to avoid race condition.&lt;/p&gt;

&lt;h3 id=&#34;misc-tips:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;misc tips&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;g++&lt;/code&gt; to compile your cpp file if you use c++ programming language, otherwise there will be some strange errors during complilation like &lt;code&gt;undefined reference to XXX&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>