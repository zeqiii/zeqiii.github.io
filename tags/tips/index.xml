<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Zeqi&#39;s Blog</title>
    <link>https://zeqiii.github.io/tags/tips/</link>
    <description>Recent content in Tips on Zeqi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>zeqiii@163.com (zeqi)</managingEditor>
    <webMaster>zeqiii@163.com (zeqi)</webMaster>
    <copyright>(c) 2016 zeqi</copyright>
    <lastBuildDate>Thu, 10 Mar 2016 17:20:53 +0800</lastBuildDate>
    <atom:link href="https://zeqiii.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Methods of Debugging Java Programs</title>
      <link>https://zeqiii.github.io/2016/03/10/methods-of-debugging-java-programs/</link>
      <pubDate>Thu, 10 Mar 2016 17:20:53 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/03/10/methods-of-debugging-java-programs/</guid>
      <description>

&lt;h2 id=&#34;debug-java-source-code-in-eclipse&#34;&gt;Debug Java Source Code In Eclipse&lt;/h2&gt;

&lt;p&gt;Sometimes we want to know how a Java API works. It is a good idea to write a testing program, debug it and step into the API function to see how it works.&lt;/p&gt;

&lt;p&gt;But when I first try this, I encounter a problem like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/source_not_found.png&#34; alt=&#34;source not found&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To solve this problem.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;code&gt;Window&lt;/code&gt;-&amp;gt;&lt;code&gt;Preferences&lt;/code&gt;-&amp;gt;&lt;code&gt;Java&lt;/code&gt;-&amp;gt;&lt;code&gt;Installed JREs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/installed_jres.png&#34; alt=&#34;installed jres&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;code&gt;Add...&lt;/code&gt;, select &lt;code&gt;Standard VM&lt;/code&gt; and click &lt;code&gt;Next&amp;gt;&lt;/code&gt;, in the dialog, add your JDK_HOME to the &lt;code&gt;JRE home:&lt;/code&gt;, give a name for the new JRE definition, then click &lt;code&gt;Finish&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/jre_definition.png&#34; alt=&#34;jre definition&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Return to your project, right click on the project and select &lt;code&gt;Properties&lt;/code&gt;-&amp;gt;&lt;code&gt;Java Build Path&lt;/code&gt;-&amp;gt;&lt;code&gt;Libraries&lt;/code&gt;, select the &lt;code&gt;JRE System Library&lt;/code&gt; then click &lt;code&gt;Edit...&lt;/code&gt;. Replace the original JRE system library with your newly defined JRE library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/edit_library.png&#34; alt=&#34;jre definition&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select &lt;code&gt;Run&lt;/code&gt;-&amp;gt;&lt;code&gt;Debug Configurations...&lt;/code&gt;-&amp;gt;&lt;code&gt;Source&lt;/code&gt;, add your project folder to the &lt;code&gt;Source Lookup Path&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/add_project_source_folder.png&#34; alt=&#34;add project source folder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s debug!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zeqiii.github.io/img/methods_of_debugging_java_programs/debug.png&#34; alt=&#34;debug&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;debug-with-jdi&#34;&gt;Debug with JDI&lt;/h2&gt;

&lt;p&gt;Referring to &lt;a href=&#34;http://illegalargumentexception.blogspot.com/2009/03/java-using-jpda-to-write-debugger.html&#34;&gt;llegalargumentexception.blogspot.com&lt;/a&gt;, using Java code to connect to the VM can help us debug a Java program.&lt;/p&gt;

&lt;p&gt;The routine to debug.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Test {

  int foo;

  public static void main(String[] args) {
    Random random = new Random();
    Test test = new Test();
    for (int i = 0; i &amp;lt; 10; i++) {
      test.foo = random.nextInt();
      System.out.println(test.foo);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, import &lt;code&gt;tools.jar&lt;/code&gt; to the classpath.&lt;/p&gt;

&lt;p&gt;Code connecting to the VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class VMAcquirer {

  /**
   * Call this with the localhost port to connect to.
   */
  public VirtualMachine connect(int port)
      throws IOException {
    String strPort = Integer.toString(port);
    AttachingConnector connector = getConnector();
    try {
      VirtualMachine vm = connect(connector, strPort);
      return vm;
    } catch (IllegalConnectorArgumentsException e) {
      throw new IllegalStateException(e);
    }
  }

  private AttachingConnector getConnector() {
    VirtualMachineManager vmManager = Bootstrap
        .virtualMachineManager();
    for (Connector connector : vmManager
        .attachingConnectors()) {
      System.out.println(connector.name());
      if (&amp;quot;com.sun.jdi.SocketAttach&amp;quot;.equals(connector
          .name())) {
        return (AttachingConnector) connector;
      }
    }
    throw new IllegalStateException();
  }

  private VirtualMachine connect(
      AttachingConnector connector, String port)
      throws IllegalConnectorArgumentsException,
      IOException {
    Map&amp;lt;String, Connector.Argument&amp;gt; args = connector
        .defaultArguments();
    Connector.Argument pidArgument = args.get(&amp;quot;port&amp;quot;);
    if (pidArgument == null) {
      throw new IllegalStateException();
    }
    pidArgument.setValue(port);

    return connector.attach(args);
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, monitoring Test.foo with code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; Programming knowledge</title>
      <link>https://zeqiii.github.io/2016/03/08/c/c-programming-knowledge/</link>
      <pubDate>Tue, 08 Mar 2016 10:12:52 +0800</pubDate>
      <author>zeqiii@163.com (zeqi)</author>
      <guid>https://zeqiii.github.io/2016/03/08/c/c-programming-knowledge/</guid>
      <description>

&lt;h2 id=&#34;functions-reserved-words-and-macros:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;Functions, Reserved Words and Macros&lt;/h2&gt;

&lt;h3 id=&#34;reinterpret-cast-new-type-expression:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;reinterpret_cast &lt;new_type&gt; (expression)&lt;/h3&gt;

&lt;p&gt;Cast the &lt;code&gt;expression&lt;/code&gt; to a &lt;code&gt;new_type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef int (*FunctionPointer)(int); 
int value = 21; 
FunctionPointer funcP; 
funcP = reinterpret_cast&amp;lt;FunctionPointer&amp;gt; (&amp;amp;value); 
funcP(value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this program will crash after being executed.&lt;/p&gt;

&lt;h3 id=&#34;macro-with-variable-argument-list:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;Macro with variable argument list&lt;/h3&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define LOG(format, ...) fprintf(stdout, format, __VA_ARGS__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;...&lt;/code&gt; means the arguments are variable, &lt;code&gt;__VA_ARGS__&lt;/code&gt; represents the variable arguments.&lt;/p&gt;

&lt;p&gt;In GCC, we can also:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define LOG(format, args...) fprintf(stdout, format, args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the macros defined above, we can:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LOG(&amp;quot;%d,%s&amp;quot;, 1, &amp;quot;hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;size-t:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;size_t&lt;/h3&gt;

&lt;p&gt;Alias of one of the fundamental unsigned integer types. &lt;code&gt;size_t&lt;/code&gt; is unsigned integer defined in standard C lib, in 64-bit OS, it is long unsigned integer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sizeof&lt;/code&gt; operation returns a size_t type value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; usually is used in array index, looping, pointer, memory location calculating.&lt;/p&gt;

&lt;p&gt;See more &lt;a href=&#34;http://www.cplusplus.com/reference/cstring/size_t/&#34;&gt;DETAILS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;mutable:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;mutable&lt;/h3&gt;

&lt;p&gt;mutable variables always can be changed even if it is in a const function.&lt;/p&gt;

&lt;p&gt;As we know, if a function doesn&amp;rsquo;t change any fields of a class, this function will be declared with &lt;code&gt;const&lt;/code&gt;. But sometimes this kind of functions need to modify some specific fields that have no business with the state of the class. In this condition, these specific fields should declared with the key word &lt;code&gt;mutable&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;volatile:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;volatile&lt;/h3&gt;

&lt;p&gt;To optimize a program, commonly, the compiler make the executables read/write a variable from registers. But sometimes a varible may be changed frequently.&lt;/p&gt;

&lt;p&gt;If a variable are declared with the key word &lt;code&gt;volatile&lt;/code&gt;, that means the variable can be changed at any moment,
the compiler will compile the program to make this variable be read/write directly from the memory, which helps to avoid race condition.&lt;/p&gt;

&lt;h3 id=&#34;misc-tips:f4d4f217ac0e8a971a18d7aee1dbb609&#34;&gt;misc tips&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;g++&lt;/code&gt; to compile your cpp file if you use c++ programming language, otherwise there will be some strange errors during complilation like &lt;code&gt;undefined reference to XXX&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>